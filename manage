#!/usr/bin/env python3
import csv
import json
import os

from flask.cli import FlaskGroup
from sqlalchemy.exc import IntegrityError, InvalidRequestError

from executor.run_cmd import CommandExecutor
from server.app import create_app
from server.logging import setup_logger
from server.models import *

app = create_app()
cli = FlaskGroup(create_app=create_app)

HERE = os.path.abspath(os.path.dirname(__file__))
PROJECT_ROOT = os.path.join(HERE, "project")


@cli.command()
def create_db():
    """ Drops all existing tables and creates them afterwards """
    db.create_all()
    print("Created")


@cli.command()
def drop_db():
    """Drops the db tables."""
    db.drop_all()
    print("Dropped")


@cli.command()
def clean_db():
    """ Drop existing tables and create fresh new ones """
    db.drop_all()
    db.create_all()
    print("Created")


@cli.command()
def load_badges():
    """Creates and saves badges as defined in data.json"""
    with open("data/badges.json", "r") as badge_fd:
        badge_dict: dict = json.loads(badge_fd.read())
        for _, badge in badge_dict.items():
            try:
                Badge.create(
                    name=badge['name'],
                    src_filename=badge['src_filename'],
                    description=badge['description'],
                    condition=badge.get('condition')
                )
            except (IntegrityError, InvalidRequestError):
                print(f"Skipping {badge['name']} because it already exists.")
    print(f"Created badges. Now there are {Badge.query.count()} badges.")


@cli.command()
def load_challenges():
    """Load all challenges from file"""
    with open("executor/docker_image/ro_volume/challenges.json", "r") as badge_fd:
        challenge_dict: dict = json.loads(badge_fd.read())
        for _, challenge in challenge_dict.items():
            try:
                Challenge.create(
                    identifier=challenge['identifier'],
                    name=challenge['name'],
                    description=challenge['description'],
                    help=challenge.get('help', None),
                    external_link=challenge.get('external_link', None),
                )
            except (IntegrityError, InvalidRequestError):
                print(f"Skipping {challenge['name']} because it already exists.")
    print(f"Created Challenges. Now there are {Challenge.query.count()} challenges.")


@cli.command()
def test():
    """ Test docker """
    c = CommandExecutor()
    output = c.run_command_parsed(("echo hi",), challenge="01_list_all_files")
    print(output)


def for_each_group(func_to_call, *args, **kwargs):
    query = User.query
    total = func_to_call(query, *args, **kwargs)
    cg = func_to_call(query.filter(User.mode == GameModes.ControlGroup), *args, **kwargs)
    bg = func_to_call(query.filter(User.mode == GameModes.BADGE), *args, **kwargs)
    pb = func_to_call(query.filter(User.mode == GameModes.PROGRESSBAR), *args, **kwargs)
    return {
        'ALL': total,
        'CG': cg,
        'BG': bg,
        'PB': pb
    }


def user_get_total_time_played(user: User, threshold=30 * 60):
    commands = SubmittedCommand.query.filter(
        SubmittedCommand.user_uuid == user.uuid
    ).order_by(
        SubmittedCommand.time_submitted.asc()
    ).all()

    total_time = 0
    for i, command in enumerate(commands):
        try:
            next_c = commands[i + 1]
        except IndexError:
            continue
        span = (next_c.time_submitted - command.time_submitted).seconds
        if span < threshold:
            total_time += span
    return total_time


def user_get_total_submissions(user: User):
    return len(user.commands)


def user_get_total_solved_challenges(user: User):
    return SubmittedCommand.query.filter(SubmittedCommand.user_uuid == user.uuid, SubmittedCommand.solved_challenge == True).count()


def user_get_total_wrong_challenges(user: User):
    return SubmittedCommand.query.filter(SubmittedCommand.user_uuid == user.uuid, SubmittedCommand.solved_challenge == False).count()


@cli.command()
def generate_report_csv():
    """
    Subject | Gender | Age | English Skills | Knowledge | Total Time played | Total Submissions  | Total solved Challenges | N wrong commands |
    """
    field_names = [
        "Subject",
        "Gender",
        "Age",
        "English Skills",
        "Commandline usage",
        "Condition",
        "Total time played",
        "Total Submissions",
        "Total correct Submissions",
        "Total wrong Submissions",
    ]

    user_stats = []
    for i, user in enumerate(User.query.all()):
        user_total_time = user_get_total_time_played(user)
        user_total_submissions = user_get_total_submissions(user)
        user_total_solved_submissions = user_get_total_solved_challenges(user)
        user_total_wrong_submissions = user_get_total_wrong_challenges(user)
        user_stats.append([
            i + 1,
            user.gender,
            user.age,
            user.english_skills,
            user.bash_experience,
            user.mode.value,
            user_total_time,
            user_total_submissions,
            user_total_solved_submissions,
            user_total_wrong_submissions
        ])

    with open('report.csv', 'w') as report_file:
        writer = csv.DictWriter(report_file, fieldnames=field_names, delimiter=";")
        writer.writeheader()

        for line in user_stats:
            writer.writerow(dict(zip(field_names, line)))

        print(f"Exported {len(user_stats)} rows")


if __name__ == "__main__":
    # Logging
    setup_logger(level=logging.DEBUG if app.config['DEBUG'] else logging.INFO)
    cli()
