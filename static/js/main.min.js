const WELCOME_GREETING="Welcome to WebShell.ðŸ˜€\nThis is a web application that asks you to solve some problems by using the commandline. You can use whatever command you like.\nEach question can be solved by submitting a command or a combination of commands.\nIf you need help, you can type 'help' and you will receive a hint and a link to some useful resource.\nQuestion are displayed in gray, with an leading '#'. E.g.:\n"+apply_color("# List all .txt files","gray")+"\nYou can start hacking right now! Good luck!\n",WELCOME_BACK_GREETING="Welcome back to WebShell.ðŸ˜€\nYou can continue right where you left off!\nRemember: If you need help, you can type 'help' and you will receive a hint and a link to some useful resource.\n",terminal_config={TAB_COMPLETION:["find","echo","awk","sed","wc","grep","cat","sort","cut","ls"],GREETINGS:WELCOME_GREETING,NAME:"Webshell"},server_config={API_URL:"https://api.command-line.online/"},TEXT_UNDERLINE="u",TEXT_STRIKE="s",TEXT_OVERLINE="o",TEXT_ITALIC="i",TEXT_BOLD="b",TEXT_GLOW="g";function apply_color(e,t="",s=""){return"[["+s+";"+t+";black]"+e+"]"}function json_to_list(e){let t=[];for(const s in e)t.push(e[s]);return t}function format_description(e){return"# Question:\n# "+e.match(/[^\r\n]+/g).join("\n# ")}function cleanup(){localStorage.removeItem("uuid"),location.reload()}async function get_challenges(){const e=server_config.API_URL+"challenge/list",t=await fetch(e,{method:"GET",redirect:"follow",referrerPolicy:"no-referrer"});return await t.json()}function create_img(e,t,s,n,i=""){const a=new Image(0,0);return a.id=e,a.alt=t,a.src=s,a.classList=n,a.title=i,a}class Command{constructor(e,t){this.command=e,this.challenge=t,this.sanitize()}get isValid(){return this.command.length>0}sanitize(){this.command=this.command.replace(/^\s+|\s+$/g,"")}get json(){if(this.isValid)return JSON.stringify({command:this.command,challenge:this.challenge})}}class ChallengeIterator{constructor(e){this.challenges_json=e,this.challenges_list=json_to_list(e),this.current_index=0,this.length=this.challenges_list.length}next(){return this.has_next_challenge()?this.challenges_list[++this.current_index]:null}has_next_challenge(){return this.current_index<this.length-1}get current_challenge(){return this.challenges_list[this.current_index]}get current_challenge_id(){return this.current_challenge.identifier}}class Badge{static async fetch_badges(){const e=server_config.API_URL+"badges/list",t=await fetch(e,{method:"GET",redirect:"follow",referrerPolicy:"no-referrer"}),s=await t.json();return Object.keys(s).map(e=>Badge.from_json(s[e]))}static from_json(e){return new Badge(e.id,e.name,e.src_filename,e.description)}constructor(e,t,s,n=""){this.id=e,this.name=t,this.description=n,this.src_filename=s,this.active_svg=null,this.inactive_svg=null,this.enabled=!1,this.init(),Badge.enable_badges()}static enable_badges(){document.getElementById(Badge.CONTAINER_ID).classList.toggle("disabled",!1)}static get CONTAINER_ID(){return"badgeContainer"}init(){this.add_svgs()}get active_src(){return"svg/"+this.src_filename+"_green.svg"}get inactive_src(){return"svg/"+this.src_filename+"_gray.svg"}add_svgs(){this.inactive_svg=create_img(this.name+"-disabled","medal badge",this.inactive_src,[],this.description),this.active_svg=create_img(this.name+"-enabled","medal badge",this.active_src,["disabled"],this.description),document.getElementById("badgeContainer").append(this.active_svg,this.inactive_svg)}enable(){this.enabled||(this.active_svg.classList.toggle("disabled",!1),this.inactive_svg.classList.toggle("disabled",!0),this.enabled=!0)}disable(){this.active_svg.classList.toggle("disabled",!0),this.inactive_svg.classList.toggle("disabled",!1)}}class Progressbar{constructor(e="progressbar"){this._percentage=1,this.id=e,this.span=null,this.create_element(),this.update(),this.show()}create_element(){this.div.classList.toggle("meter",!0),this.span=document.createElement("span"),this.div.appendChild(this.span)}show(){document.getElementById(this.id).classList.toggle("disabled",!1)}get div(){return document.getElementById(this.id)}get percentage(){return this._percentage}get percentage_string(){return`${this._percentage}%`}set percentage(e){if(e<0||e>100)throw new Error("Value must be between (0) and (100)");this._percentage=e.toFixed(0),this.update()}update(){this.span.style.width=this.percentage_string}}class CommandlineEngine{constructor(e){this.terminal=null,this.challenges=new ChallengeIterator(e),this.uuid=null,this.mode=null,this.badges=null,this.progressbar=null}async restore(e){console.log("Found existing user. Restoring session...");try{const t=server_config.API_URL+`user/${e}/state`,s=await this.http_get(t);if(!s.ok)return;const n=await s.json();this.mode=n.mode,this.uuid=e,this.challenges.current_index=Math.max(n.solved_challenges.length,0),await this.load_resources(),"BADGE"===this.mode&&this.set_badges_active(n.badges),console.log("Successfully restored user: "+e),terminal_config.GREETINGS=WELCOME_BACK_GREETING}catch(e){console.error(e),this.uuid=null}}async http_get(e){return await fetch(e,{method:"GET",redirect:"follow",referrerPolicy:"no-referrer",headers:{"X-UUID":this.uuid}})}async http_post(e,t){return await fetch(e,{method:"POST",mode:"cors",cache:"no-cache",headers:{"Content-Type":"application/json","X-UUID":this.uuid},referrerPolicy:"no-referrer",body:t})}async init(){const e=localStorage.getItem("uuid");e&&await this.restore(e),this.uuid||(console.log("No existing session found. Creating new one..."),await this.create_session(),await this.load_resources(),localStorage.setItem("uuid",this.uuid)),this.update()}async load_resources(){"BADGE"===this.mode?this.badges=await Badge.fetch_badges():"PROGRESSBAR"===this.mode&&(this.progressbar=new Progressbar)}async create_session(){const e=await this.register();this.uuid=e.uuid,this.mode=e.mode}async register(){const e=server_config.API_URL+"session/new",t=await this.http_get(e);return await t.json()}async handle_submit(e){if(this.check_builtins(e))return;const t=new Command(e,this.challenges.current_challenge_id),s=server_config.API_URL+"command/run";try{const e=await(await this.http_post(s,t.json)).json();e.error?this.error(e.error):this.handle_command_result(e)}catch(e){this.error(e)}}check_builtins(e){if("help"===e.trim()){const e=this.challenges.current_challenge.help,t=this.challenges.current_challenge.external_link;return e||t||this.echo("No help available. You're on your own."),e&&this.echo(e),t&&this.echo("You might take a look at this resource: "+apply_color(t,"blue",TEXT_GLOW+TEXT_UNDERLINE+TEXT_ITALIC)),!0}}ready(){this.display_challenge_description()}echo(e){this.terminal.echo(apply_color(e,"gray"))}error(e){this.terminal.echo(apply_color(e,"red"))}success(e){this.terminal.echo(apply_color(e,"green",TEXT_GLOW))}display_challenge_description(){if(this.challenges.current_challenge){const e=format_description(this.challenges.current_challenge.description);this.echo(e)}else this.handle_win()}handle_command_result(e){this.echo(e.output.replace(/\n+$/,"")),e.badges&&this.set_badges_active(e.badges),e.success&&(this.terminal.clear(),this.load_next_challenge(),this.update())}set_badges_active(e){this.badges&&this.badges.forEach((t,s)=>{e.indexOf(t.id)>-1&&(t.enabled||(t.enable(),this.echo(apply_color(`ðŸŽ‰You earned the ${t.name} badgeðŸŽ‰`,"green",TEXT_BOLD+TEXT_UNDERLINE))))})}update(){this.progressbar&&this.challenges.current_index>0&&(this.progressbar.percentage=100/this.challenges.length*this.challenges.current_index)}handle_win(){this.success("Congratulations, you solved all problems\nDo you agree to answer a simple question about the user experience?\n If so, please head to https://command-line.online/feedback.html"),this.terminal.freeze(1)}load_next_challenge(){if(this.success("Good JOB! You solved the question\n\n","green"),this.challenges.has_next_challenge()){this.challenges.next();this.display_challenge_description()}else this.handle_win()}}function init_terminal(e){e.terminal=$("#terminal").terminal(async(t,s)=>{s.pause(),t.length&&await e.handle_submit(t,s),s.resume()},{inputStyle:"contenteditable",exceptionHandler:function(e,t){void 0===window.flush&&(window.flush=0),flush++<=1&&$("<pre>"+e.message+"\n"+e.stack+"</pre>").appendTo("body")},greetings:terminal_config.GREETINGS,convertLinks:!0,name:terminal_config.NAME,prompt:e=>{e(apply_color(">>> ","green"))},completion:terminal_config.TAB_COMPLETION,onAfterCommand:function(t,s){"clear"===t&&e.challenges.current_challenge&&s.echo(apply_color(format_description(e.challenges.current_challenge.description),"grey"))}}),e.ready()}$(async function(){try{const e=await get_challenges(),t=new CommandlineEngine(e);await t.init(),init_terminal(t)}catch(e){throw console.error("Could not create a new terminal game, because "+e),$("#error").toggle("hidden",!1),e}});